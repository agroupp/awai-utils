var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/Arr.html",[0,0.23,1,0.592]],["body/classes/Arr.html",[0,0.156,1,1.023,2,0.628,3,0.774,4,0.628,5,0.628,6,1.203,7,1.163,8,1.163,9,1.142,10,1.438,11,1.552,12,2.367,13,0.506,14,2.13,15,2.367,16,2.412,17,1.807,18,3.16,19,2.716,20,3.16,21,2.367,22,1.807,23,2.17,24,2.843,25,2.367,26,2.17,27,1.907,28,1.576,29,2.843,30,2.213,31,1.92,32,2.367,33,1.807,34,1.807,35,1.807,36,1.943,37,0.085,38,1.47,39,1.269,40,1.812,41,1.907,42,2.367,43,1.576,44,3.689,45,2.087,46,3.16,47,2.161,48,3.019,49,2.367,50,1.576,51,1.807,52,1.807,53,1.163,54,2.367,55,1.576,56,2.367,57,1.349,58,3.16,59,1.576,60,2.367,61,1.807,62,0.628,63,0.628,64,1.438,65,1.664,66,1.576,67,1.576,68,1.576,69,1.576,70,1.576,71,1.576,72,2.306,73,1.576,74,1.203,75,1.132,76,1.203,77,1.576,78,2.412,79,1.807,80,1.92,81,2.412,82,1.576,83,1.576,84,1.807,85,1.163,86,0.402,87,0.628,88,0.774,89,1.812,90,1.576,91,1.576,92,1.664,93,1.807,94,1.576,95,2.843,96,1.576,97,1.576,98,1.163,99,1.664,100,0.069,101,1.807,102,1.576,103,1.576,104,1.576,105,1.807,106,1.576,107,1.576,108,1.92,109,1.576,110,1.576,111,1.576,112,2.367,113,2.367,114,2.367,115,0.043,116,0.029]],["title/classes/RandomBytesProvider.html",[0,0.23,117,1.141]],["body/classes/RandomBytesProvider.html",[0,0.369,1,0.719,2,0.799,3,0.986,4,0.799,5,0.799,7,1.603,8,1.386,11,1.739,13,0.644,14,1.901,26,2.491,27,1.386,30,1.901,31,2.591,36,1.386,37,0.085,38,1.124,39,0.906,40,1.386,41,1.386,45,2.026,53,0.986,57,1.616,62,1.124,63,1.3,64,2.151,85,0.986,86,0.719,87,1.616,88,0.986,89,1.386,92,1.386,98,1.739,99,1.739,100,0.036,115,0.051,116,0.036,117,1.386,118,1.219,119,2.821,120,2.821,121,2.821,122,2.821,123,2.821,124,2.154,125,2.821,126,2.154,127,2.821,128,2.821,129,2.821,130,2.821,131,2.006,132,2.151,133,2.821,134,2.006,135,2.703,136,2.154,137,2.491,138,3.263,139,1.714,140,2.151,141,2.154,142,1.532,143,1.983,144,1.532,145,1.532,146,2.154,147,2.154,148,2.154,149,1.532,150,1.983,151,3.54,152,3.54,153,3.263,154,3.54,155,2.006,156,2.006,157,2.006,158,1.486,159,2.821,160,2.821,161,2.006,162,2.006,163,3.263,164,2.821,165,2.006,166,2.006,167,2.006,168,2.006,169,2.006,170,1.532,171,2.006,172,2.006,173,2.006,174,2.006]],["title/classes/Rnd.html",[0,0.23,86,0.592]],["body/classes/Rnd.html",[0,0.138,1,0.55,2,0.556,3,0.686,4,0.556,5,0.556,7,1.738,8,1.061,9,0.693,10,1.312,11,1.458,13,0.448,14,2.012,19,2.925,27,1.667,30,1.738,31,1.312,33,2.925,34,2.266,35,2.266,36,1.916,37,0.084,38,1.352,39,1.089,40,1.667,41,1.667,45,2.094,47,1.95,57,1.815,61,2.014,62,1.352,63,1.352,65,1.945,85,1.061,86,0.55,87,1.743,88,0.686,89,1.296,92,1.577,98,1.916,99,1.458,100,0.048,115,0.039,116,0.066,117,0.686,132,1.312,135,2.863,136,2.266,140,0.849,175,1.066,176,2.159,177,2.159,178,2.159,179,2.159,180,2.159,181,2.159,182,3.209,183,2.159,184,2.159,185,2.159,186,1.397,187,4.192,188,1.397,189,3.831,190,4.055,191,3.209,192,3.831,193,3.831,194,3.831,195,3.209,196,3.75,197,3.75,198,3.209,199,2.45,200,1.397,201,1.397,202,2.159,203,1.397,204,3.654,205,3.654,206,2.969,207,2.969,208,4.055,209,2.159,210,1.397,211,2.159,212,1.397,213,1.397,214,1.397,215,1.397,216,2.159,217,2.159,218,2.159,219,2.159,220,1.397,221,3.393,222,1.397,223,2.159,224,1.397,225,1.397]],["title/classes/Str.html",[0,0.23,75,0.925]],["body/classes/Str.html",[0,0.093,1,0.4,2,0.806,3,0.462,4,1.13,5,0.375,7,1.16,8,0.772,9,0.843,10,0.955,11,1.16,13,0.302,14,2.114,16,0.719,17,1.2,22,1.2,23,1.544,27,1.885,30,0.462,36,1.838,37,0.085,38,1.56,39,1.201,40,1.885,41,1.885,45,2.064,47,1.724,48,2.409,51,3.041,52,2.502,53,1.838,57,0.941,62,0.626,63,0.626,64,0.955,65,1.29,72,2.754,74,2.409,75,1.638,76,0.719,78,1.2,79,2.298,80,1.229,81,1.2,84,1.2,85,0.772,86,0.24,87,1.046,88,0.772,89,1.61,92,1.706,93,1.2,98,0.994,99,1.863,100,0.057,101,0.719,108,0.955,115,0.029,116,0.017,132,0.955,139,1.435,158,0.626,199,1.2,226,0.572,227,3.382,228,1.571,229,1.571,230,1.571,231,1.571,232,1.571,233,1.571,234,1.571,235,1.571,236,1.571,237,1.571,238,1.571,239,1.571,240,1.571,241,1.2,242,0.941,243,0.941,244,1.2,245,0.941,246,0.941,247,0.941,248,0.941,249,0.941,250,0.941,251,3.741,252,2.022,253,1.571,254,0.941,255,2.837,256,1.571,257,1.571,258,1.571,259,1.571,260,0.941,261,0.941,262,0.941,263,2.004,264,1.2,265,0.941,266,0.941,267,0.941,268,1.544,269,0.941,270,0.941,271,1.2,272,1.571,273,0.941,274,1.571,275,0.941,276,1.571,277,0.941,278,1.571,279,1.571,280,1.571,281,0.941,282,0.941,283,2.022,284,1.571,285,0.941,286,2.022,287,1.571,288,2.626,289,2.626,290,2.626,291,0.941,292,1.571,293,1.571,294,1.571,295,1.571,296,1.571,297,2.837,298,0.941,299,0.941,300,0.941,301,0.941,302,1.2,303,1.2,304,0.941,305,0.941,306,0.941,307,0.941,308,0.941,309,1.571,310,2.837,311,2.361,312,2.361,313,0.941,314,2.361,315,2.837,316,3.01,317,1.544,318,1.571,319,1.571,320,0.941,321,3.155,322,3.277,323,3.155,324,2.361,325,2.361,326,0.941,327,1.571,328,0.941,329,0.941,330,0.941,331,0.941,332,0.941,333,0.941,334,0.941,335,0.941,336,0.941,337,0.719,338,0.719,339,1.544,340,0.719,341,0.719,342,0.719,343,0.719,344,0.719,345,0.719,346,0.941,347,0.572,348,0.719,349,2.409,350,2.582,351,1.2,352,1.2,353,2.166,354,1.2,355,0.719,356,0.719,357,1.803,358,0.941,359,0.941,360,0.941,361,0.572,362,0.719,363,1.2,364,1.2,365,1.2,366,1.2,367,0.719,368,0.572,369,0.719,370,0.719,371,0.719,372,0.572,373,0.719,374,0.719,375,0.572,376,0.572,377,0.719,378,0.719,379,0.955,380,0.719,381,1.571,382,0.941,383,1.571,384,0.941,385,0.941,386,0.941,387,0.941,388,0.941,389,0.941,390,0.941,391,0.941,392,0.941,393,1.571,394,0.941,395,0.941,396,0.941,397,0.941,398,0.941,399,0.941,400,0.941,401,1.571,402,0.941,403,0.941,404,0.941,405,2.837,406,0.941,407,0.941,408,0.941,409,1.571,410,0.941,411,0.941,412,0.941,413,0.941,414,0.941,415,0.941,416,0.941,417,0.941,418,0.941,419,0.941,420,0.941,421,0.941]],["title/changelog.html",[422,1.194,423,1.194,424,1.5]],["body/changelog.html",[0,0.403,1,1.037,9,1.144,37,0.058,75,1.622,86,0.907,87,1.419,100,0.043,115,0.058,116,0.043,158,1.419,170,2.72,241,2.72,424,2.418,425,2.375,426,2.72,427,3.563,428,2.375,429,2.375,430,2.375,431,2.375,432,2.375,433,3.167,434,4.223,435,3.167,436,3.167,437,3.563,438,3.563,439,4.072,440,3.264,441,3.563,442,3.563,443,4.276,444,3.563,445,3.563,446,3.563,447,3.563,448,3.563,449,3.563,450,3.563,451,3.563,452,3.563,453,3.563,454,2.72,455,4.276,456,3.563,457,3.563,458,4.072,459,3.563,460,3.563,461,3.563,462,3.563,463,3.563,464,3.563,465,3.563,466,3.563,467,3.563,468,3.563,469,2.165,470,3.563,471,3.563,472,3.563,473,2.375,474,3.167,475,2.375]],["title/coverage.html",[469,1.896]],["body/coverage.html",[0,0.407,1,0.749,5,1.171,6,2.244,37,0.083,39,0.943,75,1.171,86,0.749,100,0.053,115,0.066,116,0.053,117,1.444,118,2.395,143,1.786,150,1.786,158,1.171,175,2.244,226,2.68,347,1.786,361,1.786,368,1.786,372,1.786,375,1.786,376,1.786,379,1.786,469,1.786,476,2.244,477,2.939,478,2.939,479,4.536,480,2.939,481,2.939,482,4.446,483,4.446,484,2.939,485,2.939,486,2.939,487,2.939]],["title/dependencies.html",[488,1.965,489,2.123]],["body/dependencies.html",[37,0.079,100,0.064,115,0.074,116,0.064,489,2.698,490,3.534,491,3.534,492,3.534,493,3.534]],["title/index.html",[13,0.631,422,1.194,423,1.194]],["body/index.html",[9,1.286,37,0.073,100,0.063,115,0.073,116,0.063,126,2.645,440,2.645,454,2.645,494,3.464,495,3.464,496,3.464,497,3.464,498,4.007,499,3.464,500,3.464,501,3.464,502,3.464]],["title/license.html",[422,1.194,423,1.194,503,1.5]],["body/license.html",[37,0.065,100,0.053,105,2.216,115,0.065,116,0.053,124,2.751,244,2.751,426,2.216,476,2.216,503,2.216,504,2.903,505,3.919,506,2.903,507,2.903,508,3.604,509,2.903,510,2.903,511,2.903,512,2.903,513,2.903,514,2.903,515,4.437,516,2.903,517,2.903,518,2.903,519,3.919,520,2.903,521,3.604,522,2.903,523,2.903,524,2.903,525,2.903,526,2.903,527,2.903,528,2.903,529,2.903,530,2.903,531,3.604,532,2.903,533,2.903,534,2.903,535,2.903,536,2.903,537,2.903,538,2.903,539,3.604,540,3.604,541,2.903,542,2.903,543,2.903,544,2.903,545,2.903,546,2.903,547,2.903,548,2.903,549,2.903,550,2.903,551,2.903,552,2.903,553,2.903,554,2.903,555,2.903,556,2.903,557,2.903,558,2.903,559,2.903,560,2.903,561,2.903,562,2.903,563,2.903,564,2.903,565,2.903,566,2.903,567,2.903,568,2.903,569,2.903,570,2.903,571,2.903]],["title/modules.html",[572,2.382]],["body/modules.html",[37,0.074,100,0.065,115,0.074,116,0.065,572,2.74]],["title/overview.html",[573,2.382]],["body/overview.html",[2,1.422,37,0.074,100,0.065,115,0.074,116,0.065,573,2.726,574,3.57]],["title/miscellaneous/variables.html",[575,1.5,576,2.123]],["body/miscellaneous/variables.html",[4,1.285,9,0.784,13,0.784,37,0.083,38,0.972,39,1.035,53,1.199,57,1.285,62,1.712,63,1.712,65,1.199,72,2.427,80,1.483,100,0.044,108,1.483,115,0.059,116,0.044,118,1.483,137,2.462,139,2.494,140,1.96,141,2.462,142,1.864,143,1.96,144,1.864,145,1.864,146,2.462,147,2.462,148,2.462,149,1.864,150,1.96,158,0.972,226,1.483,263,2.462,264,1.864,268,1.864,271,1.864,302,1.864,303,1.864,317,1.864,337,1.864,338,1.864,339,1.864,340,1.864,341,1.864,342,1.864,343,1.864,344,1.864,345,1.864,347,1.96,348,1.864,349,3.243,350,3.314,351,2.462,352,2.462,353,3.133,354,2.462,355,1.864,356,1.864,357,2.933,361,1.96,362,1.864,363,2.462,364,2.462,365,2.462,366,2.462,367,1.864,368,1.96,369,1.864,370,1.864,371,1.864,372,1.96,373,1.864,374,1.864,375,1.96,376,1.96,377,1.864,378,1.864,379,1.96,380,1.864,575,1.864,576,1.864,577,4.185,578,3.225,579,2.441]]],"invertedIndex":[["",{"_index":37,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":65,"title":{},"body":{"classes/Arr.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["0).map(d",{"_index":417,"title":{},"body":{"classes/Str.html":{}}}],["0,61}[a",{"_index":354,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["0.0",{"_index":34,"title":{},"body":{"classes/Arr.html":{},"classes/Rnd.html":{}}}],["0.0.0",{"_index":475,"title":{},"body":{"changelog.html":{}}}],["0.0.1",{"_index":473,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":425,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":474,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":428,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":427,"title":{},"body":{"changelog.html":{}}}],["0c7396d",{"_index":432,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":98,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["1,254}$)(?=.{1,64}@)[a",{"_index":348,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["1.0",{"_index":35,"title":{},"body":{"classes/Arr.html":{},"classes/Rnd.html":{}}}],["1.10.0",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":483,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":194,"title":{},"body":{"classes/Rnd.html":{}}}],["100",{"_index":479,"title":{},"body":{"coverage.html":{}}}],["16/16",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["2020",{"_index":426,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["256",{"_index":217,"title":{},"body":{"classes/Rnd.html":{}}}],["25[0",{"_index":362,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["2b491ea",{"_index":446,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":403,"title":{},"body":{"classes/Str.html":{}}}],["3.5.9",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":481,"title":{},"body":{"coverage.html":{}}}],["398a179",{"_index":457,"title":{},"body":{"changelog.html":{}}}],["39;bold&#39",{"_index":330,"title":{},"body":{"classes/Str.html":{}}}],["39;em&#39",{"_index":329,"title":{},"body":{"classes/Str.html":{}}}],["39;italic&#39",{"_index":331,"title":{},"body":{"classes/Str.html":{}}}],["39;majority&#39",{"_index":328,"title":{},"body":{"classes/Str.html":{}}}],["39;who",{"_index":320,"title":{},"body":{"classes/Str.html":{}}}],["4",{"_index":574,"title":{},"body":{"overview.html":{}}}],["4][0",{"_index":364,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["4cf20f3",{"_index":444,"title":{},"body":{"changelog.html":{}}}],["5]|2[0",{"_index":363,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["7/7",{"_index":484,"title":{},"body":{"coverage.html":{}}}],["730d1d4",{"_index":470,"title":{},"body":{"changelog.html":{}}}],["7d2114e",{"_index":436,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":294,"title":{},"body":{"classes/Str.html":{}}}],["8/8",{"_index":480,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":353,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["9!#$%&'*+/=?^_",{"_index":351,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["99657e8",{"_index":452,"title":{},"body":{"changelog.html":{}}}],["9](?:[a",{"_index":352,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["9])?(?:\\.[a",{"_index":355,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["9]+)*\\.)+[a",{"_index":369,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["9]?)\\.){3}(?:25[0",{"_index":367,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["9][0",{"_index":366,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["9]|[01]?[0",{"_index":365,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["9abc188",{"_index":450,"title":{},"body":{"changelog.html":{}}}],["abcdefghijklmnopqrstuvwxyz",{"_index":380,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["above",{"_index":538,"title":{},"body":{"license.html":{}}}],["accessors",{"_index":22,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{}}}],["accurate",{"_index":356,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["action",{"_index":564,"title":{},"body":{"license.html":{}}}],["added",{"_index":434,"title":{},"body":{"changelog.html":{}}}],["address",{"_index":268,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["addresses",{"_index":342,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["afff18a",{"_index":447,"title":{},"body":{"changelog.html":{}}}],["alpha",{"_index":252,"title":{},"body":{"classes/Str.html":{}}}],["alpha_only_regex",{"_index":376,"title":{},"body":{"classes/Str.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["alphalower",{"_index":288,"title":{},"body":{"classes/Str.html":{}}}],["alphaupper",{"_index":289,"title":{},"body":{"classes/Str.html":{}}}],["alphbet",{"_index":378,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["always",{"_index":498,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":529,"title":{},"body":{"license.html":{}}}],["angular",{"_index":345,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["arising",{"_index":568,"title":{},"body":{"license.html":{}}}],["arr",{"_index":1,"title":{"classes/Arr.html":{}},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"changelog.html":{},"coverage.html":{}}}],["arr.bytestofloat(bytes",{"_index":218,"title":{},"body":{"classes/Rnd.html":{}}}],["arr.isnullorempty(arr",{"_index":95,"title":{},"body":{"classes/Arr.html":{}}}],["arr.isnullorempty(chars",{"_index":419,"title":{},"body":{"classes/Str.html":{}}}],["arr.length",{"_index":94,"title":{},"body":{"classes/Arr.html":{}}}],["arr.shuffle",{"_index":431,"title":{},"body":{"changelog.html":{}}}],["arr.shuffle(chars",{"_index":421,"title":{},"body":{"classes/Str.html":{}}}],["arr.slice(0",{"_index":107,"title":{},"body":{"classes/Arr.html":{}}}],["arr.stringtochararray(str.englishlettersordered",{"_index":90,"title":{},"body":{"classes/Arr.html":{}}}],["arr.stringtochararray(str.englishlettersordered.touppercase",{"_index":91,"title":{},"body":{"classes/Arr.html":{}}}],["arr[0",{"_index":96,"title":{},"body":{"classes/Arr.html":{}}}],["arr[arr.length",{"_index":97,"title":{},"body":{"classes/Arr.html":{}}}],["array",{"_index":30,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["arrays",{"_index":12,"title":{},"body":{"classes/Arr.html":{}}}],["arthur",{"_index":506,"title":{},"body":{"license.html":{}}}],["ascii",{"_index":256,"title":{},"body":{"classes/Str.html":{}}}],["associated",{"_index":516,"title":{},"body":{"license.html":{}}}],["async",{"_index":182,"title":{},"body":{"classes/Rnd.html":{}}}],["authors",{"_index":557,"title":{},"body":{"license.html":{}}}],["awai",{"_index":494,"title":{},"body":{"index.html":{}}}],["awai/toolbox",{"_index":501,"title":{},"body":{"index.html":{}}}],["await",{"_index":219,"title":{},"body":{"classes/Rnd.html":{}}}],["basic",{"_index":448,"title":{},"body":{"changelog.html":{}}}],["bf370ec",{"_index":445,"title":{},"body":{"changelog.html":{}}}],["bold",{"_index":395,"title":{},"body":{"classes/Str.html":{}}}],["boolean",{"_index":53,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["bound",{"_index":192,"title":{},"body":{"classes/Rnd.html":{}}}],["boundaries",{"_index":303,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["breaking",{"_index":301,"title":{},"body":{"classes/Str.html":{}}}],["browser",{"_index":142,"title":{},"body":{"classes/RandomBytesProvider.html":{},"miscellaneous/variables.html":{}}}],["buf",{"_index":166,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["bytes",{"_index":31,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{}}}],["bytes[0",{"_index":216,"title":{},"body":{"classes/Rnd.html":{}}}],["bytestofloat",{"_index":15,"title":{},"body":{"classes/Arr.html":{}}}],["bytestofloat(bytes",{"_index":25,"title":{},"body":{"classes/Arr.html":{}}}],["c",{"_index":105,"title":{},"body":{"classes/Arr.html":{},"license.html":{}}}],["c.length",{"_index":106,"title":{},"body":{"classes/Arr.html":{}}}],["c6b26dd",{"_index":466,"title":{},"body":{"changelog.html":{}}}],["cad1842",{"_index":463,"title":{},"body":{"changelog.html":{}}}],["called",{"_index":141,"title":{},"body":{"classes/RandomBytesProvider.html":{},"miscellaneous/variables.html":{}}}],["capitalize",{"_index":229,"title":{},"body":{"classes/Str.html":{}}}],["capitalize(str",{"_index":242,"title":{},"body":{"classes/Str.html":{}}}],["capitalized",{"_index":246,"title":{},"body":{"classes/Str.html":{}}}],["case",{"_index":325,"title":{},"body":{"classes/Str.html":{}}}],["catch",{"_index":162,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["changelog",{"_index":424,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["char",{"_index":255,"title":{},"body":{"classes/Str.html":{}}}],["char.charcodeat(0",{"_index":388,"title":{},"body":{"classes/Str.html":{}}}],["character",{"_index":245,"title":{},"body":{"classes/Str.html":{}}}],["characters",{"_index":251,"title":{},"body":{"classes/Str.html":{}}}],["charge",{"_index":512,"title":{},"body":{"license.html":{}}}],["chars",{"_index":74,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{}}}],["chars.concat(arr.englishlettersordered",{"_index":414,"title":{},"body":{"classes/Str.html":{}}}],["chars.concat(arr.englishlettersuppercaseordered",{"_index":415,"title":{},"body":{"classes/Str.html":{}}}],["chars.concat(arr.range(10",{"_index":416,"title":{},"body":{"classes/Str.html":{}}}],["check",{"_index":139,"title":{},"body":{"classes/RandomBytesProvider.html":{},"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["circleci",{"_index":462,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":560,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"changelog.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"overview.html":{}}}],["code",{"_index":579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["code](https://github.com/angular/angular/blob/master/packages/forms/src/validators.ts",{"_index":346,"title":{},"body":{"classes/Str.html":{}}}],["collection",{"_index":127,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["command",{"_index":456,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":443,"title":{},"body":{"changelog.html":{}}}],["conditions",{"_index":537,"title":{},"body":{"license.html":{}}}],["connection",{"_index":570,"title":{},"body":{"license.html":{}}}],["consists",{"_index":278,"title":{},"body":{"classes/Str.html":{}}}],["const",{"_index":99,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["contract",{"_index":565,"title":{},"body":{"license.html":{}}}],["control",{"_index":257,"title":{},"body":{"classes/Str.html":{}}}],["conventional",{"_index":435,"title":{},"body":{"changelog.html":{}}}],["convert",{"_index":29,"title":{},"body":{"classes/Arr.html":{}}}],["converted",{"_index":306,"title":{},"body":{"classes/Str.html":{}}}],["cookbook/9780596802837/ch07s16.html",{"_index":360,"title":{},"body":{"classes/Str.html":{}}}],["copies",{"_index":531,"title":{},"body":{"license.html":{}}}],["copy",{"_index":244,"title":{},"body":{"classes/Str.html":{},"license.html":{}}}],["copyright",{"_index":505,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":469,"title":{"coverage.html":{}},"body":{"changelog.html":{},"coverage.html":{}}}],["crypto",{"_index":138,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["cryptographically",{"_index":176,"title":{},"body":{"classes/Rnd.html":{}}}],["css",{"_index":318,"title":{},"body":{"classes/Str.html":{}}}],["d.tostring",{"_index":418,"title":{},"body":{"classes/Str.html":{}}}],["damages",{"_index":561,"title":{},"body":{"license.html":{}}}],["db759aa",{"_index":472,"title":{},"body":{"changelog.html":{}}}],["dd66c99",{"_index":459,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":518,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":571,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":290,"title":{},"body":{"classes/Str.html":{}}}],["default",{"_index":62,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":27,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["dependencies",{"_index":489,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["digits",{"_index":283,"title":{},"body":{"classes/Str.html":{}}}],["digits_only_regex",{"_index":375,"title":{},"body":{"classes/Str.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["directly",{"_index":125,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["distribute",{"_index":527,"title":{},"body":{"license.html":{}}}],["docs",{"_index":441,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":476,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["domain",{"_index":264,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["domain_name_regexp",{"_index":368,"title":{},"body":{"classes/Str.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["e",{"_index":340,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["ea00e3b",{"_index":460,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":46,"title":{},"body":{"classes/Arr.html":{}}}],["em",{"_index":394,"title":{},"body":{"classes/Str.html":{}}}],["email",{"_index":267,"title":{},"body":{"classes/Str.html":{}}}],["email_regexp",{"_index":347,"title":{},"body":{"classes/Str.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":52,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{}}}],["english",{"_index":80,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["english_letters_lowercase",{"_index":379,"title":{},"body":{"classes/Str.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["englishlettersordered",{"_index":23,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{}}}],["englishlettersuppercaseordered",{"_index":24,"title":{},"body":{"classes/Arr.html":{}}}],["equal",{"_index":197,"title":{},"body":{"classes/Rnd.html":{}}}],["err",{"_index":163,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["error('no",{"_index":174,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["event",{"_index":556,"title":{},"body":{"license.html":{}}}],["example",{"_index":319,"title":{},"body":{"classes/Str.html":{}}}],["export",{"_index":88,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["express",{"_index":547,"title":{},"body":{"license.html":{}}}],["expression",{"_index":338,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["expressions",{"_index":359,"title":{},"body":{"classes/Str.html":{}}}],["false",{"_index":387,"title":{},"body":{"classes/Str.html":{}}}],["feat(toolbox",{"_index":429,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"coverage.html":{}}}],["files",{"_index":517,"title":{},"body":{"license.html":{}}}],["filled",{"_index":60,"title":{},"body":{"classes/Arr.html":{}}}],["finished",{"_index":451,"title":{},"body":{"changelog.html":{}}}],["first",{"_index":16,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{}}}],["first(arr",{"_index":42,"title":{},"body":{"classes/Arr.html":{}}}],["fisher–yates",{"_index":69,"title":{},"body":{"classes/Arr.html":{}}}],["fitness",{"_index":552,"title":{},"body":{"license.html":{}}}],["fix",{"_index":453,"title":{},"body":{"changelog.html":{}}}],["floating",{"_index":204,"title":{},"body":{"classes/Rnd.html":{}}}],["floats",{"_index":32,"title":{},"body":{"classes/Arr.html":{}}}],["floatvalue",{"_index":221,"title":{},"body":{"classes/Rnd.html":{}}}],["folder",{"_index":442,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":536,"title":{},"body":{"license.html":{}}}],["for(const",{"_index":406,"title":{},"body":{"classes/Str.html":{}}}],["for(let",{"_index":101,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{}}}],["free",{"_index":511,"title":{},"body":{"license.html":{}}}],["function",{"_index":148,"title":{},"body":{"classes/RandomBytesProvider.html":{},"miscellaneous/variables.html":{}}}],["furnished",{"_index":534,"title":{},"body":{"license.html":{}}}],["generate",{"_index":132,"title":{},"body":{"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["generated",{"_index":296,"title":{},"body":{"classes/Str.html":{}}}],["generates",{"_index":198,"title":{},"body":{"classes/Rnd.html":{}}}],["getempty",{"_index":334,"title":{},"body":{"classes/Str.html":{}}}],["getenglishlettersordered",{"_index":76,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{}}}],["getenglishlettersuppercaseordered",{"_index":82,"title":{},"body":{"classes/Arr.html":{}}}],["getting",{"_index":422,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["granted",{"_index":510,"title":{},"body":{"license.html":{}}}],["greater",{"_index":196,"title":{},"body":{"classes/Rnd.html":{}}}],["groupp",{"_index":507,"title":{},"body":{"license.html":{}}}],["hand",{"_index":502,"title":{},"body":{"index.html":{}}}],["helper",{"_index":10,"title":{},"body":{"classes/Arr.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["here",{"_index":393,"title":{},"body":{"classes/Str.html":{}}}],["here&#39",{"_index":326,"title":{},"body":{"classes/Str.html":{}}}],["here&quot",{"_index":333,"title":{},"body":{"classes/Str.html":{}}}],["hereby",{"_index":509,"title":{},"body":{"license.html":{}}}],["higher",{"_index":122,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["holders",{"_index":558,"title":{},"body":{"license.html":{}}}],["html",{"_index":315,"title":{},"body":{"classes/Str.html":{}}}],["https://en.wikipedia.org/wiki/fisher%e2%80%93yates_shuffle",{"_index":70,"title":{},"body":{"classes/Arr.html":{}}}],["identifier",{"_index":477,"title":{},"body":{"coverage.html":{}}}],["ig",{"_index":399,"title":{},"body":{"classes/Str.html":{}}}],["ignored",{"_index":259,"title":{},"body":{"classes/Str.html":{}}}],["implied",{"_index":548,"title":{},"body":{"license.html":{}}}],["import",{"_index":85,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["improve",{"_index":468,"title":{},"body":{"changelog.html":{}}}],["include",{"_index":297,"title":{},"body":{"classes/Str.html":{}}}],["included",{"_index":541,"title":{},"body":{"license.html":{}}}],["including",{"_index":521,"title":{},"body":{"license.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["initial",{"_index":458,"title":{},"body":{"changelog.html":{}}}],["install",{"_index":499,"title":{},"body":{"index.html":{}}}],["integer",{"_index":189,"title":{},"body":{"classes/Rnd.html":{}}}],["integers",{"_index":61,"title":{},"body":{"classes/Arr.html":{},"classes/Rnd.html":{}}}],["ip",{"_index":271,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["ip_regexp",{"_index":361,"title":{},"body":{"classes/Str.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isalpha",{"_index":230,"title":{},"body":{"classes/Str.html":{}}}],["isalpha(str",{"_index":249,"title":{},"body":{"classes/Str.html":{}}}],["isbrowser",{"_index":143,"title":{},"body":{"classes/RandomBytesProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["iscontrol",{"_index":231,"title":{},"body":{"classes/Str.html":{}}}],["iscontrol(char",{"_index":253,"title":{},"body":{"classes/Str.html":{}}}],["isdomainname",{"_index":232,"title":{},"body":{"classes/Str.html":{}}}],["isdomainname(str",{"_index":260,"title":{},"body":{"classes/Str.html":{}}}],["isemail",{"_index":233,"title":{},"body":{"classes/Str.html":{}}}],["isemail(str",{"_index":265,"title":{},"body":{"classes/Str.html":{}}}],["isip",{"_index":234,"title":{},"body":{"classes/Str.html":{}}}],["isip(str",{"_index":269,"title":{},"body":{"classes/Str.html":{}}}],["islower",{"_index":235,"title":{},"body":{"classes/Str.html":{}}}],["islower(str",{"_index":272,"title":{},"body":{"classes/Str.html":{}}}],["isnodejs",{"_index":150,"title":{},"body":{"classes/RandomBytesProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isnullorempty",{"_index":17,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{}}}],["isnullorempty(arr",{"_index":49,"title":{},"body":{"classes/Arr.html":{}}}],["isnullorempty(str",{"_index":274,"title":{},"body":{"classes/Str.html":{}}}],["isnullorwhitespace",{"_index":236,"title":{},"body":{"classes/Str.html":{}}}],["isnullorwhitespace(str",{"_index":276,"title":{},"body":{"classes/Str.html":{}}}],["isnumber",{"_index":237,"title":{},"body":{"classes/Str.html":{}}}],["isnumber(str",{"_index":281,"title":{},"body":{"classes/Str.html":{}}}],["isupper",{"_index":238,"title":{},"body":{"classes/Str.html":{}}}],["isupper(str",{"_index":284,"title":{},"body":{"classes/Str.html":{}}}],["italic",{"_index":396,"title":{},"body":{"classes/Str.html":{}}}],["k",{"_index":110,"title":{},"body":{"classes/Arr.html":{}}}],["kind",{"_index":546,"title":{},"body":{"license.html":{}}}],["last",{"_index":18,"title":{},"body":{"classes/Arr.html":{}}}],["last(arr",{"_index":54,"title":{},"body":{"classes/Arr.html":{}}}],["length",{"_index":295,"title":{},"body":{"classes/Str.html":{}}}],["less",{"_index":207,"title":{},"body":{"classes/Rnd.html":{}}}],["letters",{"_index":81,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{}}}],["level",{"_index":123,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["liability",{"_index":562,"title":{},"body":{"license.html":{}}}],["liable",{"_index":559,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":495,"title":{},"body":{"index.html":{}}}],["libs/.../provider.ts",{"_index":578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../str.ts",{"_index":577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/toolbox/src/lib/arr/arr.ts",{"_index":6,"title":{},"body":{"classes/Arr.html":{},"coverage.html":{}}}],["libs/toolbox/src/lib/arr/arr.ts:18",{"_index":77,"title":{},"body":{"classes/Arr.html":{}}}],["libs/toolbox/src/lib/arr/arr.ts:23",{"_index":83,"title":{},"body":{"classes/Arr.html":{}}}],["libs/toolbox/src/lib/arr/arr.ts:31",{"_index":50,"title":{},"body":{"classes/Arr.html":{}}}],["libs/toolbox/src/lib/arr/arr.ts:39",{"_index":43,"title":{},"body":{"classes/Arr.html":{}}}],["libs/toolbox/src/lib/arr/arr.ts:47",{"_index":55,"title":{},"body":{"classes/Arr.html":{}}}],["libs/toolbox/src/lib/arr/arr.ts:55",{"_index":59,"title":{},"body":{"classes/Arr.html":{}}}],["libs/toolbox/src/lib/arr/arr.ts:67",{"_index":73,"title":{},"body":{"classes/Arr.html":{}}}],["libs/toolbox/src/lib/arr/arr.ts:80",{"_index":28,"title":{},"body":{"classes/Arr.html":{}}}],["libs/toolbox/src/lib/arr/arr.ts:94",{"_index":67,"title":{},"body":{"classes/Arr.html":{}}}],["libs/toolbox/src/lib/random/provider.ts",{"_index":118,"title":{},"body":{"classes/RandomBytesProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["libs/toolbox/src/lib/random/provider.ts:32",{"_index":134,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["libs/toolbox/src/lib/random/provider.ts:63",{"_index":131,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["libs/toolbox/src/lib/random/rnd.ts",{"_index":175,"title":{},"body":{"classes/Rnd.html":{},"coverage.html":{}}}],["libs/toolbox/src/lib/random/rnd.ts:105",{"_index":201,"title":{},"body":{"classes/Rnd.html":{}}}],["libs/toolbox/src/lib/random/rnd.ts:22",{"_index":203,"title":{},"body":{"classes/Rnd.html":{}}}],["libs/toolbox/src/lib/random/rnd.ts:34",{"_index":210,"title":{},"body":{"classes/Rnd.html":{}}}],["libs/toolbox/src/lib/random/rnd.ts:48",{"_index":212,"title":{},"body":{"classes/Rnd.html":{}}}],["libs/toolbox/src/lib/random/rnd.ts:72",{"_index":214,"title":{},"body":{"classes/Rnd.html":{}}}],["libs/toolbox/src/lib/random/rnd.ts:93",{"_index":188,"title":{},"body":{"classes/Rnd.html":{}}}],["libs/toolbox/src/lib/str/str.ts",{"_index":226,"title":{},"body":{"classes/Str.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["libs/toolbox/src/lib/str/str.ts:102",{"_index":254,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:113",{"_index":282,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:121",{"_index":250,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:129",{"_index":266,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:148",{"_index":270,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:156",{"_index":261,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:165",{"_index":243,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:173",{"_index":305,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:188",{"_index":299,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:217",{"_index":313,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:247",{"_index":291,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:60",{"_index":335,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:65",{"_index":336,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:70",{"_index":275,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:77",{"_index":277,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:86",{"_index":285,"title":{},"body":{"classes/Str.html":{}}}],["libs/toolbox/src/lib/str/str.ts:94",{"_index":273,"title":{},"body":{"classes/Str.html":{}}}],["license",{"_index":503,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":522,"title":{},"body":{"license.html":{}}}],["limited",{"_index":549,"title":{},"body":{"license.html":{}}}],["line",{"_index":302,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["lines",{"_index":300,"title":{},"body":{"classes/Str.html":{}}}],["list",{"_index":317,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["looks",{"_index":262,"title":{},"body":{"classes/Str.html":{}}}],["lower",{"_index":191,"title":{},"body":{"classes/Rnd.html":{}}}],["lowercase",{"_index":79,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{}}}],["lowercased",{"_index":248,"title":{},"body":{"classes/Str.html":{}}}],["mail",{"_index":341,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["majority",{"_index":322,"title":{},"body":{"classes/Str.html":{}}}],["match",{"_index":407,"title":{},"body":{"classes/Str.html":{}}}],["match.index",{"_index":409,"title":{},"body":{"classes/Str.html":{}}}],["match.input.substr(0",{"_index":410,"title":{},"body":{"classes/Str.html":{}}}],["match.input.substr(match.index",{"_index":412,"title":{},"body":{"classes/Str.html":{}}}],["match[0].length",{"_index":413,"title":{},"body":{"classes/Str.html":{}}}],["matches",{"_index":339,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":115,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["math.round(floatvalue",{"_index":223,"title":{},"body":{"classes/Rnd.html":{}}}],["max",{"_index":187,"title":{},"body":{"classes/Rnd.html":{}}}],["mean",{"_index":371,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":551,"title":{},"body":{"license.html":{}}}],["merge",{"_index":525,"title":{},"body":{"license.html":{}}}],["method",{"_index":68,"title":{},"body":{"classes/Arr.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["min",{"_index":190,"title":{},"body":{"classes/Rnd.html":{}}}],["miscellaneous",{"_index":575,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mit",{"_index":504,"title":{},"body":{"license.html":{}}}],["modify",{"_index":524,"title":{},"body":{"license.html":{}}}],["modules",{"_index":572,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mongodb",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["n",{"_index":108,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":38,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":126,"title":{},"body":{"classes/RandomBytesProvider.html":{},"index.html":{}}}],["new",{"_index":158,"title":{},"body":{"classes/RandomBytesProvider.html":{},"classes/Str.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["new_line_boundaries",{"_index":372,"title":{},"body":{"classes/Str.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":179,"title":{},"body":{"classes/Rnd.html":{}}}],["next(min",{"_index":186,"title":{},"body":{"classes/Rnd.html":{}}}],["nextasync",{"_index":180,"title":{},"body":{"classes/Rnd.html":{}}}],["nextasync(min",{"_index":200,"title":{},"body":{"classes/Rnd.html":{}}}],["nextbytes",{"_index":128,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["nextbytes(size",{"_index":130,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["nextbytesasync",{"_index":129,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["nextbytesasync(size",{"_index":133,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["nextfloat",{"_index":181,"title":{},"body":{"classes/Rnd.html":{}}}],["nextfloat(qty",{"_index":202,"title":{},"body":{"classes/Rnd.html":{}}}],["nextfloatasync",{"_index":183,"title":{},"body":{"classes/Rnd.html":{}}}],["nextfloatasync(qty",{"_index":209,"title":{},"body":{"classes/Rnd.html":{}}}],["nextint",{"_index":184,"title":{},"body":{"classes/Rnd.html":{}}}],["nextint(min",{"_index":211,"title":{},"body":{"classes/Rnd.html":{}}}],["nextintasync",{"_index":185,"title":{},"body":{"classes/Rnd.html":{}}}],["nextintasync(min",{"_index":213,"title":{},"body":{"classes/Rnd.html":{}}}],["nodejs",{"_index":149,"title":{},"body":{"classes/RandomBytesProvider.html":{},"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":555,"title":{},"body":{"license.html":{}}}],["notice",{"_index":539,"title":{},"body":{"license.html":{}}}],["npm",{"_index":454,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["null",{"_index":48,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{}}}],["number",{"_index":57,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":206,"title":{},"body":{"classes/Rnd.html":{}}}],["numeric",{"_index":292,"title":{},"body":{"classes/Str.html":{}}}],["obtaining",{"_index":514,"title":{},"body":{"license.html":{}}}],["one",{"_index":199,"title":{},"body":{"classes/Rnd.html":{},"classes/Str.html":{}}}],["opinion",{"_index":323,"title":{},"body":{"classes/Str.html":{}}}],["optional",{"_index":40,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["ordered",{"_index":78,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{}}}],["otherwise",{"_index":567,"title":{},"body":{"license.html":{}}}],["out",{"_index":569,"title":{},"body":{"license.html":{}}}],["output",{"_index":405,"title":{},"body":{"classes/Str.html":{}}}],["output.substr(0",{"_index":408,"title":{},"body":{"classes/Str.html":{}}}],["overview",{"_index":573,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":488,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":92,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["parameters",{"_index":36,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["particular",{"_index":553,"title":{},"body":{"license.html":{}}}],["permission",{"_index":508,"title":{},"body":{"license.html":{}}}],["permit",{"_index":532,"title":{},"body":{"license.html":{}}}],["person",{"_index":513,"title":{},"body":{"license.html":{}}}],["persons",{"_index":533,"title":{},"body":{"license.html":{}}}],["point",{"_index":205,"title":{},"body":{"classes/Rnd.html":{}}}],["portions",{"_index":543,"title":{},"body":{"license.html":{}}}],["processing",{"_index":228,"title":{},"body":{"classes/Str.html":{}}}],["promise",{"_index":135,"title":{},"body":{"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{}}}],["promise(promisefunc",{"_index":171,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["promisefunc",{"_index":151,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["provided",{"_index":544,"title":{},"body":{"license.html":{}}}],["provider",{"_index":140,"title":{},"body":{"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":8,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["public",{"_index":89,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["publish",{"_index":526,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":554,"title":{},"body":{"license.html":{}}}],["qty",{"_index":208,"title":{},"body":{"classes/Rnd.html":{}}}],["quot;who",{"_index":332,"title":{},"body":{"classes/Str.html":{}}}],["r",{"_index":374,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["r\\n",{"_index":373,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["random",{"_index":87,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"changelog.html":{}}}],["random(size",{"_index":287,"title":{},"body":{"classes/Str.html":{}}}],["randombytes",{"_index":137,"title":{},"body":{"classes/RandomBytesProvider.html":{},"miscellaneous/variables.html":{}}}],["randombytes(size",{"_index":165,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["randombytesprovider",{"_index":117,"title":{"classes/RandomBytesProvider.html":{}},"body":{"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"coverage.html":{}}}],["randombytesprovider.nextbytes(qty",{"_index":215,"title":{},"body":{"classes/Rnd.html":{}}}],["randombytesprovider.nextbytesasync(qty",{"_index":220,"title":{},"body":{"classes/Rnd.html":{}}}],["range",{"_index":19,"title":{},"body":{"classes/Arr.html":{},"classes/Rnd.html":{}}}],["range(size",{"_index":56,"title":{},"body":{"classes/Arr.html":{}}}],["readme",{"_index":439,"title":{},"body":{"changelog.html":{}}}],["reason",{"_index":155,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["refactor",{"_index":433,"title":{},"body":{"changelog.html":{}}}],["refactor(whole",{"_index":437,"title":{},"body":{"changelog.html":{}}}],["regex",{"_index":357,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["regexp",{"_index":343,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["regexp(term",{"_index":398,"title":{},"body":{"classes/Str.html":{}}}],["regular",{"_index":337,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["reject",{"_index":154,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["reject('no",{"_index":169,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["reject(err",{"_index":164,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["repo",{"_index":438,"title":{},"body":{"changelog.html":{}}}],["resolve",{"_index":152,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["resolve(arr",{"_index":161,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["resolve(new",{"_index":167,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["resolves",{"_index":136,"title":{},"body":{"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{}}}],["rest",{"_index":247,"title":{},"body":{"classes/Str.html":{}}}],["restriction",{"_index":520,"title":{},"body":{"license.html":{}}}],["result",{"_index":100,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.filter(c",{"_index":104,"title":{},"body":{"classes/Arr.html":{}}}],["result.length",{"_index":109,"title":{},"body":{"classes/Arr.html":{}}}],["result.splice(result.length",{"_index":392,"title":{},"body":{"classes/Str.html":{}}}],["result[k",{"_index":113,"title":{},"body":{"classes/Arr.html":{}}}],["result[n",{"_index":114,"title":{},"body":{"classes/Arr.html":{}}}],["results",{"_index":116,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":45,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["returned",{"_index":193,"title":{},"body":{"classes/Rnd.html":{}}}],["returns",{"_index":41,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["rights",{"_index":523,"title":{},"body":{"license.html":{}}}],["rnd",{"_index":86,"title":{"classes/Rnd.html":{}},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"changelog.html":{},"coverage.html":{}}}],["rnd.next",{"_index":430,"title":{},"body":{"changelog.html":{}}}],["rnd.next(0",{"_index":111,"title":{},"body":{"classes/Arr.html":{}}}],["rnd.nextfloat(qty",{"_index":222,"title":{},"body":{"classes/Rnd.html":{}}}],["rnd.nextfloatasync(qty",{"_index":224,"title":{},"body":{"classes/Rnd.html":{}}}],["rnd.nextintasync(min",{"_index":225,"title":{},"body":{"classes/Rnd.html":{}}}],["save",{"_index":500,"title":{},"body":{"index.html":{}}}],["sell",{"_index":530,"title":{},"body":{"license.html":{}}}],["sequence",{"_index":293,"title":{},"body":{"classes/Str.html":{}}}],["set",{"_index":9,"title":{},"body":{"classes/Arr.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["setup",{"_index":449,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":540,"title":{},"body":{"license.html":{}}}],["shuffle",{"_index":20,"title":{},"body":{"classes/Arr.html":{}}}],["shuffle(arr",{"_index":66,"title":{},"body":{"classes/Arr.html":{}}}],["size",{"_index":64,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Str.html":{}}}],["software",{"_index":515,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["source](https://www.oreilly.com/library/view/regular",{"_index":358,"title":{},"body":{"classes/Str.html":{}}}],["space",{"_index":280,"title":{},"body":{"classes/Str.html":{}}}],["specified",{"_index":47,"title":{},"body":{"classes/Arr.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["splitlines",{"_index":239,"title":{},"body":{"classes/Str.html":{}}}],["splitlines(str",{"_index":298,"title":{},"body":{"classes/Str.html":{}}}],["start",{"_index":58,"title":{},"body":{"classes/Arr.html":{}}}],["started",{"_index":423,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":478,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":14,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{}}}],["str",{"_index":75,"title":{"classes/Str.html":{}},"body":{"classes/Arr.html":{},"classes/Str.html":{},"changelog.html":{},"coverage.html":{}}}],["str.empty",{"_index":420,"title":{},"body":{"classes/Str.html":{}}}],["str.isnullorempty(char",{"_index":386,"title":{},"body":{"classes/Str.html":{}}}],["str.isnullorempty(str",{"_index":102,"title":{},"body":{"classes/Arr.html":{}}}],["str.isnullorwhitespace(result[result.length",{"_index":391,"title":{},"body":{"classes/Str.html":{}}}],["str.isnullorwhitespace(str",{"_index":383,"title":{},"body":{"classes/Str.html":{}}}],["str.length",{"_index":381,"title":{},"body":{"classes/Str.html":{}}}],["str.matchall(termregex",{"_index":400,"title":{},"body":{"classes/Str.html":{}}}],["str.replace(nl",{"_index":389,"title":{},"body":{"classes/Str.html":{}}}],["str.split",{"_index":103,"title":{},"body":{"classes/Arr.html":{}}}],["str.split('\\n",{"_index":390,"title":{},"body":{"classes/Str.html":{}}}],["str.tolowercase",{"_index":385,"title":{},"body":{"classes/Str.html":{}}}],["str.touppercase",{"_index":384,"title":{},"body":{"classes/Str.html":{}}}],["str.trim().length",{"_index":382,"title":{},"body":{"classes/Str.html":{}}}],["str.wrapinhtmltag(text",{"_index":327,"title":{},"body":{"classes/Str.html":{}}}],["string",{"_index":72,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["stringtochararray",{"_index":21,"title":{},"body":{"classes/Arr.html":{}}}],["stringtochararray(str",{"_index":71,"title":{},"body":{"classes/Arr.html":{}}}],["strong",{"_index":177,"title":{},"body":{"classes/Rnd.html":{}}}],["subject",{"_index":535,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":528,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":542,"title":{},"body":{"license.html":{}}}],["suite",{"_index":465,"title":{},"body":{"changelog.html":{}}}],["swapcase",{"_index":240,"title":{},"body":{"classes/Str.html":{}}}],["swapcase(str",{"_index":304,"title":{},"body":{"classes/Str.html":{}}}],["symbol",{"_index":258,"title":{},"body":{"classes/Str.html":{}}}],["system",{"_index":170,"title":{},"body":{"classes/RandomBytesProvider.html":{},"changelog.html":{}}}],["t",{"_index":44,"title":{},"body":{"classes/Arr.html":{}}}],["table",{"_index":487,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":486,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":316,"title":{},"body":{"classes/Str.html":{}}}],["tag.length",{"_index":402,"title":{},"body":{"classes/Str.html":{}}}],["tagclasses",{"_index":312,"title":{},"body":{"classes/Str.html":{}}}],["taglength",{"_index":401,"title":{},"body":{"classes/Str.html":{}}}],["tagname",{"_index":311,"title":{},"body":{"classes/Str.html":{}}}],["tagname.length",{"_index":404,"title":{},"body":{"classes/Str.html":{}}}],["tag}${match[0",{"_index":411,"title":{},"body":{"classes/Str.html":{}}}],["taken",{"_index":344,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["temp",{"_index":112,"title":{},"body":{"classes/Arr.html":{}}}],["term",{"_index":310,"title":{},"body":{"classes/Str.html":{}}}],["termregex",{"_index":397,"title":{},"body":{"classes/Str.html":{}}}],["test",{"_index":455,"title":{},"body":{"changelog.html":{}}}],["texas",{"_index":324,"title":{},"body":{"classes/Str.html":{}}}],["text",{"_index":227,"title":{},"body":{"classes/Str.html":{}}}],["throw",{"_index":173,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["toolbox",{"_index":440,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["tools",{"_index":496,"title":{},"body":{"index.html":{}}}],["tort",{"_index":566,"title":{},"body":{"license.html":{}}}],["true",{"_index":51,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{}}}],["try",{"_index":157,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["tslib",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":119,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["type",{"_index":39,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":147,"title":{},"body":{"classes/RandomBytesProvider.html":{},"miscellaneous/variables.html":{}}}],["uint8array",{"_index":26,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{}}}],["uint8array(buf",{"_index":168,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["uint8array(randombytes(size",{"_index":172,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["uint8array(size",{"_index":159,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["undefined",{"_index":93,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{}}}],["unknown",{"_index":156,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["up",{"_index":461,"title":{},"body":{"changelog.html":{}}}],["update",{"_index":464,"title":{},"body":{"changelog.html":{}}}],["updated",{"_index":467,"title":{},"body":{"changelog.html":{}}}],["updates",{"_index":471,"title":{},"body":{"changelog.html":{}}}],["upercase",{"_index":84,"title":{},"body":{"classes/Arr.html":{},"classes/Str.html":{}}}],["upper",{"_index":195,"title":{},"body":{"classes/Rnd.html":{}}}],["uppercase",{"_index":286,"title":{},"body":{"classes/Str.html":{}}}],["use",{"_index":124,"title":{},"body":{"classes/RandomBytesProvider.html":{},"license.html":{}}}],["usually",{"_index":120,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["utilized",{"_index":121,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["valid",{"_index":263,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":63,"title":{},"body":{"classes/Arr.html":{},"classes/RandomBytesProvider.html":{},"classes/Rnd.html":{},"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":178,"title":{},"body":{"classes/Rnd.html":{}}}],["variable",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":576,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["versa",{"_index":308,"title":{},"body":{"classes/Str.html":{}}}],["vice",{"_index":307,"title":{},"body":{"classes/Str.html":{}}}],["void",{"_index":153,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["warranties",{"_index":550,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":545,"title":{},"body":{"license.html":{}}}],["whether",{"_index":563,"title":{},"body":{"license.html":{}}}],["white",{"_index":279,"title":{},"body":{"classes/Str.html":{}}}],["window",{"_index":144,"title":{},"body":{"classes/RandomBytesProvider.html":{},"miscellaneous/variables.html":{}}}],["window.crypto",{"_index":145,"title":{},"body":{"classes/RandomBytesProvider.html":{},"miscellaneous/variables.html":{}}}],["window.crypto.getrandomvalues",{"_index":146,"title":{},"body":{"classes/RandomBytesProvider.html":{},"miscellaneous/variables.html":{}}}],["window.crypto.getrandomvalues(arr",{"_index":160,"title":{},"body":{"classes/RandomBytesProvider.html":{}}}],["within",{"_index":33,"title":{},"body":{"classes/Arr.html":{},"classes/Rnd.html":{}}}],["without",{"_index":519,"title":{},"body":{"license.html":{}}}],["wrapinhtmltag",{"_index":241,"title":{},"body":{"classes/Str.html":{},"changelog.html":{}}}],["wrapinhtmltag(str",{"_index":309,"title":{},"body":{"classes/Str.html":{}}}],["wrapped",{"_index":314,"title":{},"body":{"classes/Str.html":{}}}],["wrote",{"_index":321,"title":{},"body":{"classes/Str.html":{}}}],["you'll",{"_index":497,"title":{},"body":{"index.html":{}}}],["z",{"_index":377,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["z0",{"_index":350,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["z]{2",{"_index":370,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}],["za",{"_index":349,"title":{},"body":{"classes/Str.html":{},"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Arr.html":{"url":"classes/Arr.html","title":"class - Arr","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Arr\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/toolbox/src/lib/arr/arr.ts\n        \n\n            \n                Description\n            \n            \n                Provides a set of helper methods for arrays.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                bytesToFloat\n                            \n                            \n                                    Static\n                                first\n                            \n                            \n                                    Static\n                                isNullOrEmpty\n                            \n                            \n                                    Static\n                                last\n                            \n                            \n                                    Static\n                                range\n                            \n                            \n                                    Static\n                                shuffle\n                            \n                            \n                                    Static\n                                stringToCharArray\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    englishLettersOrdered\n                                \n                                \n                                    englishLettersUppercaseOrdered\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            bytesToFloat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    bytesToFloat(bytes: Uint8Array)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/arr/arr.ts:80\n                \n            \n\n\n            \n                \n                    Convert array of bytes into array of floats within range [0.0, 1.0]\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bytes\n                                    \n                                                Uint8Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            first\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    first(arr: Array)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/arr/arr.ts:39\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Return the first element of a specified array\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isNullOrEmpty\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isNullOrEmpty(arr: Array)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/arr/arr.ts:31\n                \n            \n\n\n            \n                \n                    Return true if a specified array is null or empty\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            last\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    last(arr: Array)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/arr/arr.ts:47\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Return the last element of a specified array\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(size: number, start: number)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/arr/arr.ts:55\n                \n            \n\n\n            \n                \n                    Return array filled by range of integers\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            shuffle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    shuffle(arr: Array)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/arr/arr.ts:94\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Shuffle the array by method Fisher–Yates\nhttps://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    arr\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        array to shuffle\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            stringToCharArray\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stringToCharArray(str: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/arr/arr.ts:67\n                \n            \n\n\n            \n                \n                    Convert string into array of chars\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        englishLettersOrdered\n                    \n                \n\n                \n                    \n                        getenglishLettersOrdered()\n                    \n                \n                            \n                                \n                                    Defined in libs/toolbox/src/lib/arr/arr.ts:18\n                                \n                            \n                    \n                        \n                                Ordered set of lowercase English letters\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        englishLettersUppercaseOrdered\n                    \n                \n\n                \n                    \n                        getenglishLettersUppercaseOrdered()\n                    \n                \n                            \n                                \n                                    Defined in libs/toolbox/src/lib/arr/arr.ts:23\n                                \n                            \n                    \n                        \n                                Ordered set of upercase English letters\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Str } from '../str';\nimport { Rnd } from '../random';\n\n/**\n * Provides a set of helper methods for arrays.\n */\nexport class Arr {\n  /**\n   * Ordered set of lowercase English letters\n   */\n  public static get englishLettersOrdered(): string[] { return Arr.stringToCharArray(Str.englishLettersOrdered); }\n\n  /**\n   * Ordered set of upercase English letters\n   */\n  public static get englishLettersUppercaseOrdered(): string[] {\n    return Arr.stringToCharArray(Str.englishLettersOrdered.toUpperCase());\n  }\n\n  /**\n   * Return `true` if a specified array is null or empty\n   * @param arr\n   */\n  public static isNullOrEmpty(arr: Array): boolean {\n    return arr === undefined || arr === null || arr.length === 0\n  }\n\n  /**\n   * Return the first element of a specified array\n   * @param array\n   */\n  public static first(arr: Array): T | null {\n    return Arr.isNullOrEmpty(arr) ? null : arr[0];\n  }\n\n  /**\n   * Return the last element of a specified array\n   * @param array\n   */\n  public static last(arr: Array): T | null {\n    return Arr.isNullOrEmpty(arr) ? null : arr[arr.length - 1];\n  }\n\n  /**\n   * Return array filled by range of integers\n   * @param size\n   */\n  public static range(size: number, start = 0): Array {\n    const result = [];\n    for(let i = start; i  {\n    if (Str.isNullOrEmpty(str)) {\n      return [];\n    }\n    let result: string[] = str.split('');\n    result = result.filter(c => c !== null && c !== undefined && c.length > 0);\n    return result;\n  }\n\n  /**\n   * Convert array of bytes into array of floats within range [0.0, 1.0]\n   * @param bytes\n   */\n  public static bytesToFloat(bytes: Uint8Array): Array {\n    const result = [];\n    for(let i = 0; i (arr: Array): Array {\n    if (Arr.isNullOrEmpty(arr)) {\n      return arr;\n    }\n    const result: Array = arr.slice(0);\n    let n = result.length;\n    while (n > 1) {\n      const k = Rnd.next(0, n);\n      n--;\n      const temp = result[k];\n      result[k] = result[n];\n      result[n] = temp;\n    }\n    return result;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RandomBytesProvider.html":{"url":"classes/RandomBytesProvider.html","title":"class - RandomBytesProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RandomBytesProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/toolbox/src/lib/random/provider.ts\n        \n\n            \n                Description\n            \n            \n                Provides two methods that return array of random bytes.\nUsually this class utilized by higher level Rnd class.\nHowever, you can use it directly if you need random bytes\ncollection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                nextBytes\n                            \n                            \n                                    Static\n                                nextBytesAsync\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            nextBytes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    nextBytes(size: number)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/random/provider.ts:63\n                \n            \n\n\n            \n                \n                    Return array of random bytes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        Number of bytes to generate\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Uint8Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            nextBytesAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    nextBytesAsync(size: number)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/random/provider.ts:32\n                \n            \n\n\n            \n                \n                    Return promise that resolves to array of random bytes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        Number of bytes to generate\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { randomBytes } from 'crypto';\n\n/**\n * Check if the provider called in browser\n */\nconst isBrowser = () =>\n  window && window.crypto && window.crypto.getRandomValues && typeof window.crypto.getRandomValues === 'function';\n\n/**\n * Check if the provider called in Nodejs\n */\nconst isNodejs = (): boolean => randomBytes && typeof randomBytes === 'function';\n\n/**\n * Provides two methods that return array of random bytes.\n * Usually this class utilized by higher level `Rnd` class.\n * However, you can use it directly if you need random bytes\n * collection.\n */\nexport class RandomBytesProvider {\n  /**\n   * Return promise that resolves to array of random bytes\n   * @param size Number of bytes to generate\n   */\n  public static nextBytesAsync(size = 1): Promise {\n    let promiseFunc: (resolve: (value: Uint8Array) => void, reject: (reason: unknown) => void) => void;\n    if (isBrowser()) {\n      promiseFunc = (resolve, reject) => {\n        try {\n          const arr = new Uint8Array(size);\n          window.crypto.getRandomValues(arr);\n          resolve(arr);\n        } catch (err) {\n          reject(err);\n        }\n      };\n    } else if (isNodejs()) {\n      promiseFunc = (resolve, reject) => {\n        randomBytes(size, (err, buf) => {\n            if (err) {\n                reject(err);\n            }\n            resolve(new Uint8Array(buf));\n        });\n      }\n    } else {\n      promiseFunc = (resolve, reject) => reject('No crypto provider in the system');\n    }\n    return new Promise(promiseFunc);\n  };\n\n  /**\n   * Return array of random bytes\n   * @param size Number of bytes to generate\n   */\n  public static nextBytes(size = 1): Uint8Array {\n    if (isBrowser()) {\n        const arr = new Uint8Array(size);\n        return window.crypto.getRandomValues(arr);\n    } else if (isNodejs()) {\n      return new Uint8Array(randomBytes(size));\n    } else {\n      throw new Error('No crypto provider');\n    }\n  };\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Rnd.html":{"url":"classes/Rnd.html","title":"class - Rnd","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Rnd\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/toolbox/src/lib/random/rnd.ts\n        \n\n            \n                Description\n            \n            \n                Provides a set of helper methods to generate cryptographically\nstrong random values.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                next\n                            \n                            \n                                    Static\n                                nextAsync\n                            \n                            \n                                    Static\n                                nextFloat\n                            \n                            \n                                    Static\n                                    Async\n                                nextFloatAsync\n                            \n                            \n                                    Static\n                                nextInt\n                            \n                            \n                                    Static\n                                    Async\n                                nextIntAsync\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            next\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    next(min: number, max: number)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/random/rnd.ts:93\n                \n            \n\n\n            \n                \n                    Return a random integer that is within a specified range\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                    \n                                        lower bound of the random number returned\n\n                                    \n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                    \n                                        upper bound of the random number returned. max must be greater than or equal to min\nWith no parameters it generates one integer within the range [0, 10]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            nextAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    nextAsync(min: number, max: number)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/random/rnd.ts:105\n                \n            \n\n\n            \n                \n                    Return a promise that resolves to random integer\nthat is within a specified range\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                    \n                                        lower bound of the random number returned\n\n                                    \n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                    \n                                        upper bound of the random number returned. max must be greater than or equal to min\nWith no parameters it generates one integer within the range [0, 10]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            nextFloat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    nextFloat(qty: number)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/random/rnd.ts:22\n                \n            \n\n\n            \n                \n                    Return a random floating-point number or array of\nrandom floating-point numbers that is greater\nthan or equal to 0.0, and less than 1.0\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    qty\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        number of results to return\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number | []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            nextFloatAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    nextFloatAsync(qty: number)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/random/rnd.ts:34\n                \n            \n\n\n            \n                \n                    Return a promise that resolves to random floating-point\nnumber or array of random floating-point\nnumbers that is greater than or equal to 0.0, and less\nthan 1.0\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    qty\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        number of results to return\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            nextInt\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    nextInt(min: number, max: number, qty: number)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/random/rnd.ts:48\n                \n            \n\n\n            \n                \n                    Return a random integer or array of random integers\nthat is within a specified range\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                    \n                                        lower bound of the random number returned\n\n                                    \n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                    \n                                        upper bound of the random number returned. max must be greater than or equal to min\n\n                                    \n                                \n                                \n                                    qty\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        number of results to return\nWith no parameters it generates one integer within the range [0, 10]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number | []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            nextIntAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    nextIntAsync(min: number, max: number, qty: number)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/random/rnd.ts:72\n                \n            \n\n\n            \n                \n                    Return a promise that resolves to random integer\nor array of random integers that is\nwithin a specified range\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                    \n                                        lower bound of the random number returned\n\n                                    \n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                    \n                                        upper bound of the random number returned. max must be greater than or equal to min\n\n                                    \n                                \n                                \n                                    qty\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        number of results to return\nWith no parameters it generates one integer within the range [0, 10]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { RandomBytesProvider } from './provider';\nimport { Arr } from '../arr';\n\n/**\n * Provides a set of helper methods to generate cryptographically\n * strong random values.\n */\nexport class Rnd {\n  /**\n   * Return a random floating-point number or array of\n   * random floating-point numbers that is greater\n   * than or equal to 0.0, and less than 1.0\n   * @param qty number of results to return\n   */\n  public static nextFloat(qty = 1): number | number[] {\n    const bytes = RandomBytesProvider.nextBytes(qty);\n    return qty === 1 ? bytes[0] / 256 : Arr.bytesToFloat(bytes);\n  }\n\n  /**\n   * Return a promise that resolves to random floating-point\n   * number or array of random floating-point\n   * numbers that is greater than or equal to 0.0, and less\n   * than 1.0\n   * @param qty number of results to return\n   */\n  public static async nextFloatAsync(qty = 1): Promise {\n    const bytes = await RandomBytesProvider.nextBytesAsync(qty);\n    return qty === 1 ? bytes[0] / 256 : Arr.bytesToFloat(bytes);\n  }\n\n  /**\n   * Return a random integer or array of random integers\n   * that is within a specified range\n   * @param min lower bound of the random number returned\n   * @param max upper bound of the random number returned. `max` must be greater than or equal to `min`\n   * @param qty number of results to return\n   *\n   * With no parameters it generates one integer within the range [0, 10]\n   */\n  public static nextInt(min = 0, max = 10, qty = 1): number | number[] {\n    let floatValue = Rnd.nextFloat(qty);\n    if (qty === 1) {\n      return Math.round(floatValue as number * (max - min) + min);\n    } else {\n      floatValue = floatValue as number[];\n      const result = [];\n      for (let i = 0; i  {\n    let floatValue = await Rnd.nextFloatAsync(qty);\n    if (qty === 1) {\n      return Math.round(floatValue as number * (max - min) + min);\n    } else {\n      floatValue = floatValue as number[];\n      const result = [];\n      for (let i = 0; i  {\n    return Rnd.nextIntAsync(min, max) as Promise;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Str.html":{"url":"classes/Str.html","title":"class - Str","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Str\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/toolbox/src/lib/str/str.ts\n        \n\n            \n                Description\n            \n            \n                Provides a set of helper methods for text processing.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                capitalize\n                            \n                            \n                                    Static\n                                isAlpha\n                            \n                            \n                                    Static\n                                isControl\n                            \n                            \n                                    Static\n                                isDomainName\n                            \n                            \n                                    Static\n                                isEmail\n                            \n                            \n                                    Static\n                                isIp\n                            \n                            \n                                    Static\n                                isLower\n                            \n                            \n                                    Static\n                                isNullOrEmpty\n                            \n                            \n                                    Static\n                                isNullOrWhiteSpace\n                            \n                            \n                                    Static\n                                isNumber\n                            \n                            \n                                    Static\n                                isUpper\n                            \n                            \n                                    Static\n                                random\n                            \n                            \n                                    Static\n                                splitLines\n                            \n                            \n                                    Static\n                                swapCase\n                            \n                            \n                                    Static\n                                wrapInHtmlTag\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    empty\n                                \n                                \n                                    englishLettersOrdered\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            capitalize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    capitalize(str: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/str/str.ts:165\n                \n            \n\n\n            \n                \n                    Return a copy of the string with its first character capitalized and the rest lowercased\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isAlpha\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isAlpha(str: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/str/str.ts:121\n                \n            \n\n\n            \n                \n                    Return true if all characters in the string are alpha only\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isControl\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isControl(char: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/str/str.ts:102\n                \n            \n\n\n            \n                \n                    Return true if char is ASCII control symbol\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    char\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        one char string. All other characters will be ignored\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isDomainName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainName(str: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/str/str.ts:156\n                \n            \n\n\n            \n                \n                    Return true if string looks like a valid domain name\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isEmail(str: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/str/str.ts:129\n                \n            \n\n\n            \n                \n                    Return true if string is a valid email address\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isIp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isIp(str: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/str/str.ts:148\n                \n            \n\n\n            \n                \n                    Return true if string is a valid IP address\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isLower\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isLower(str: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/str/str.ts:94\n                \n            \n\n\n            \n                \n                    Return true if all characters in the string are lowercase\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isNullOrEmpty\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isNullOrEmpty(str: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/str/str.ts:70\n                \n            \n\n\n            \n                \n                    Return true if a specified string is null, empty\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isNullOrWhiteSpace\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isNullOrWhiteSpace(str: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/str/str.ts:77\n                \n            \n\n\n            \n                \n                    Return true if a specified string is null, empty, or consists only of white-space characters\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isNumber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isNumber(str: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/str/str.ts:113\n                \n            \n\n\n            \n                \n                    Return true if all characters in the string are digits only\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            isUpper\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isUpper(str: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/str/str.ts:86\n                \n            \n\n\n            \n                \n                    Return true if all characters in the string are uppercase\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            random\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    random(size: number, alphaLower, alphaUpper, decimal)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/str/str.ts:247\n                \n            \n\n\n            \n                \n                    Generate alpha numeric random sequence string\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        8\n                                    \n\n                                    \n                                        length of generated string\n\n                                    \n                                \n                                \n                                    alphaLower\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        include lowercase characters\n\n                                    \n                                \n                                \n                                    alphaUpper\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        include upercase characters\n\n                                    \n                                \n                                \n                                    decimal\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        include digits\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            splitLines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    splitLines(str: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/str/str.ts:188\n                \n            \n\n\n            \n                \n                    Return an array of the lines in the string, breaking at line boundaries\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            swapCase\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    swapCase(str: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/str/str.ts:173\n                \n            \n\n\n            \n                \n                    Return a copy of the string with uppercase characters converted to lowercase and vice versa\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            wrapInHtmlTag\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    wrapInHtmlTag(str: string, term: string, tagName: string, tagClasses: string[])\n                \n            \n\n\n            \n                \n                    Defined in libs/toolbox/src/lib/str/str.ts:217\n                \n            \n\n\n            \n                \n                    Return source text with \"term\" wrapped by specified HTML tag\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    str\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        source text\n\n                                    \n                                \n                                \n                                    term\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        text that must be wrapped\n\n                                    \n                                \n                                \n                                    tagName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        name of HTML tag\n\n                                    \n                                \n                                \n                                    tagClasses\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                    \n                                        (optional) list of css classes of HTML tag\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const text = &#39;who also wrote the majority opinion in the Texas Case, wrote the majority opinion here&#39;;\nconst result = Str.wrapInHtmlTag(text, &#39;majority&#39;, &#39;em&#39;, [&#39;bold&#39;, &#39;italic&#39;]);\nThe result will be:\n&quot;who also wrote the majority opinion in the Texas Case, wrote the majority opinion here&quot;\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        empty\n                    \n                \n\n                \n                    \n                        getempty()\n                    \n                \n                            \n                                \n                                    Defined in libs/toolbox/src/lib/str/str.ts:60\n                                \n                            \n                    \n                        \n                                Empty string\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        englishLettersOrdered\n                    \n                \n\n                \n                    \n                        getenglishLettersOrdered()\n                    \n                \n                            \n                                \n                                    Defined in libs/toolbox/src/lib/str/str.ts:65\n                                \n                            \n                    \n                        \n                                Ordered set of lowercase English letters\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Arr } from '../arr';\nimport { Rnd } from '../random';\n\n/**\n * A regular expression that matches valid e-mail addresses.\n *\n * This regexp was taken from\n * [Angular source code](https://github.com/angular/angular/blob/master/packages/forms/src/validators.ts)\n *\n */\nconst EMAIL_REGEXP =\n    /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\n/**\n * Accurate regex to check for an IP address\n *\n * [Source](https://www.oreilly.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html)\n */\nconst IP_REGEXP = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n\n/**\n * Regex to check for valid domain name\n */\nconst DOMAIN_NAME_REGEXP = /^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$/;\n\n/**\n * List of boundaries that mean \"new line\"\n */\nconst NEW_LINE_BOUNDARIES: string[] = ['\\r\\n', '\\r', '\\n'];\n\n/**\n * Regex to check if string is a number\n */\nconst DIGITS_ONLY_REGEX = /^[0-9]+$/;\n\n/**\n * Regex to check if string is a number\n */\nconst ALPHA_ONLY_REGEX = /^[A-z]+$/;\n\n/**\n * Set of English alphbet as a string\n */\nexport const ENGLISH_LETTERS_LOWERCASE = 'abcdefghijklmnopqrstuvwxyz';\n\n/**\n * Provides a set of helper methods for text processing.\n */\nexport class Str {\n  /**\n   * Empty string\n   */\n  public static get empty(): string { return ''; }\n\n  /**\n   * Ordered set of lowercase English letters\n   */\n  public static get englishLettersOrdered(): string { return ENGLISH_LETTERS_LOWERCASE; }\n\n  /**\n   * Return `true` if a specified string is null, empty\n   */\n  public static isNullOrEmpty(str: string): boolean {\n    return str === undefined || str === null || str.length === 0;\n  }\n\n  /**\n   * Return `true` if a specified string is null, empty, or consists only of white-space characters\n   */\n  public static isNullOrWhiteSpace(str: string): boolean {\n    return str === undefined || str === null ||\n      str.length === 0 || str.trim().length === 0;\n  }\n\n  /**\n   * Return `true` if all characters in the string are uppercase\n   * @param str\n   */\n  public static isUpper(str: string): boolean {\n    return !Str.isNullOrWhiteSpace(str) && str === str.toUpperCase();\n  }\n\n  /**\n   * Return `true` if all characters in the string are lowercase\n   * @param str\n   */\n  public static isLower(str: string): boolean {\n    return !Str.isNullOrWhiteSpace(str) && str === str.toLowerCase();\n  }\n\n  /**\n   * Return `true` if char is ASCII control symbol\n   * @param char one char string. All other characters will be ignored\n   */\n  public static isControl(char: string): boolean {\n    if (Str.isNullOrEmpty(char)) {\n      return false;\n    }\n    return char.charCodeAt(0)  str = str.replace(nl, '\\n'));\n    const result = str.split('\\n');\n    if (Str.isNullOrWhiteSpace(result[result.length - 1])) {\n      result.splice(result.length - 1, 1);\n    }\n    return result;\n  }\n\n  /**\n   * Return source text with \"term\" wrapped by specified HTML tag\n   *\n   *\n   * @example\n   *\n   * const text = 'who also wrote the majority opinion in the Texas Case, wrote the majority opinion here';\n   * const result = Str.wrapInHtmlTag(text, 'majority', 'em', ['bold', 'italic']);\n   *\n   *\n   * The result will be:\n   *\n   * \"who also wrote the majority opinion in the Texas Case, wrote the majority opinion here\"\n   *\n   * @param str source text\n   * @param term text that must be wrapped\n   * @param tagName name of HTML tag\n   * @param tagClasses (optional) list of css classes of HTML tag\n   *\n   */\n  public static wrapInHtmlTag(str: string, term: string, tagName: string, tagClasses: string[] = null): string {\n    const termRegex = new RegExp(term, 'ig');\n    const matches = str.matchAll(termRegex);\n    let tag = ``;\n    const tagLength = tag.length + 3 + tagName.length;\n    let output = '';\n    for(const match of matches) {\n        output = output ? output.substr(0, match.index + tagLength) : match.input.substr(0, match.index);\n        output += `${tag}${match[0]}`;\n        output += match.input.substr(match.index + match[0].length);\n    }\n    return output || str;\n  }\n\n  /**\n   * Generate alpha numeric random sequence string\n   * @param size length of generated string\n   * @param alphaLower include lowercase characters\n   * @param alphaUpper include upercase characters\n   * @param decimal include digits\n   */\n  public static random(size = 8, alphaLower = true, alphaUpper = true, decimal = true): string {\n    let chars: string[] = [];\n    chars = alphaLower ? chars.concat(Arr.englishLettersOrdered) : chars;\n    chars = alphaUpper ? chars.concat(Arr.englishLettersUppercaseOrdered) : chars;\n    chars = decimal ? chars.concat(Arr.range(10, 0).map(d => d.toString())) : chars;\n    if (Arr.isNullOrEmpty(chars)) {\n      return Str.empty;\n    }\n    chars = Arr.shuffle(chars);\n    const result: string[] = [];\n    for(let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n0.0.2 (2020-07-03)\n\nfeat(toolbox): rnd.next, arr.shuffle (0c7396d)\nrefactor: added conventional changelog (7d2114e)\nrefactor(whole repo): readme for toolbox. docs folder. new commit system (4cf20f3)\nAdded random to the toolbox (bf370ec)\nAdded wrapInHtmlTag into Str (2b491ea)\nArr class in toolbox. (afff18a)\nBasic setup. (9abc188)\nFinished with Rnd class. (99657e8)\nFix npm test command (398a179)\ninitial commit (dd66c99)\nInitial commit (ea00e3b)\nSet up Circleci (cad1842)\nupdate Arr test suite (c6b26dd)\nUpdated str test to improve coverage (730d1d4)\nUpdates to readme (db759aa)\n\n0.0.1 (2020-07-01)\n\nrefactor: added conventional changelog (7d2114e)\nrefactor(whole repo): readme for toolbox. docs folder. new commit system (4cf20f3)\nAdded random to the toolbox (bf370ec)\nAdded wrapInHtmlTag into Str (2b491ea)\nArr class in toolbox. (afff18a)\nBasic setup. (9abc188)\nFinished with Rnd class. (99657e8)\nFix npm test command (398a179)\ninitial commit (dd66c99)\nInitial commit (ea00e3b)\nSet up Circleci (cad1842)\nupdate Arr test suite (c6b26dd)\nUpdated str test to improve coverage (730d1d4)\nUpdates to readme (db759aa)\n\n0.0.0 (2020-07-01)\n\nrefactor(whole repo): readme for toolbox. docs folder. new commit system (4cf20f3)\nAdded random to the toolbox (bf370ec)\nAdded wrapInHtmlTag into Str (2b491ea)\nArr class in toolbox. (afff18a)\nBasic setup. (9abc188)\nFinished with Rnd class. (99657e8)\nFix npm test command (398a179)\ninitial commit (dd66c99)\nInitial commit (ea00e3b)\nSet up Circleci (cad1842)\nupdate Arr test suite (c6b26dd)\nUpdated str test to improve coverage (730d1d4)\nUpdates to readme (db759aa)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                libs/toolbox/src/lib/arr/arr.ts\n            \n            class\n            Arr\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                libs/toolbox/src/lib/random/provider.ts\n            \n            class\n            RandomBytesProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                libs/toolbox/src/lib/random/provider.ts\n            \n            variable\n            isBrowser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                libs/toolbox/src/lib/random/provider.ts\n            \n            variable\n            isNodejs\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                libs/toolbox/src/lib/random/rnd.ts\n            \n            class\n            Rnd\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                libs/toolbox/src/lib/str/str.ts\n            \n            class\n            Str\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                libs/toolbox/src/lib/str/str.ts\n            \n            variable\n            ALPHA_ONLY_REGEX\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                libs/toolbox/src/lib/str/str.ts\n            \n            variable\n            DIGITS_ONLY_REGEX\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                libs/toolbox/src/lib/str/str.ts\n            \n            variable\n            DOMAIN_NAME_REGEXP\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                libs/toolbox/src/lib/str/str.ts\n            \n            variable\n            EMAIL_REGEXP\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                libs/toolbox/src/lib/str/str.ts\n            \n            variable\n            ENGLISH_LETTERS_LOWERCASE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                libs/toolbox/src/lib/str/str.ts\n            \n            variable\n            IP_REGEXP\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                libs/toolbox/src/lib/str/str.ts\n            \n            variable\n            NEW_LINE_BOUNDARIES\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            mongodb : ^3.5.9\n        \n            tslib : ^1.10.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAwai\nSet of libraries.\nToolbox\nSet of tools you'll always need. So, just npm install --save @awai/toolbox and have it always at hand.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2020 Arthur Groupp\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ALPHA_ONLY_REGEX   (libs/.../str.ts)\n                        \n                        \n                            DIGITS_ONLY_REGEX   (libs/.../str.ts)\n                        \n                        \n                            DOMAIN_NAME_REGEXP   (libs/.../str.ts)\n                        \n                        \n                            EMAIL_REGEXP   (libs/.../str.ts)\n                        \n                        \n                            ENGLISH_LETTERS_LOWERCASE   (libs/.../str.ts)\n                        \n                        \n                            IP_REGEXP   (libs/.../str.ts)\n                        \n                        \n                            isBrowser   (libs/.../provider.ts)\n                        \n                        \n                            isNodejs   (libs/.../provider.ts)\n                        \n                        \n                            NEW_LINE_BOUNDARIES   (libs/.../str.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/toolbox/src/lib/str/str.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ALPHA_ONLY_REGEX\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : /^[A-z]+$/\n                        \n                    \n\n                \n                    \n                        Regex to check if string is a number\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DIGITS_ONLY_REGEX\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : /^[0-9]+$/\n                        \n                    \n\n                \n                    \n                        Regex to check if string is a number\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DOMAIN_NAME_REGEXP\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : /^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$/\n                        \n                    \n\n                \n                    \n                        Regex to check for valid domain name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            EMAIL_REGEXP\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n                        \n                    \n\n                \n                    \n                        A regular expression that matches valid e-mail addresses.\nThis regexp was taken from\nAngular source code\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ENGLISH_LETTERS_LOWERCASE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'abcdefghijklmnopqrstuvwxyz'\n                        \n                    \n\n                \n                    \n                        Set of English alphbet as a string\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            IP_REGEXP\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\n                        \n                    \n\n                \n                    \n                        Accurate regex to check for an IP address\nSource\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NEW_LINE_BOUNDARIES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : ['\\r\\n', '\\r', '\\n']\n                        \n                    \n\n                \n                    \n                        List of boundaries that mean \"new line\"\n\n                    \n                \n\n            \n        \n\n    libs/toolbox/src/lib/random/provider.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            isBrowser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () =>\n  window && window.crypto && window.crypto.getRandomValues && typeof window.crypto.getRandomValues === 'function'\n                        \n                    \n\n                \n                    \n                        Check if the provider called in browser\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNodejs\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (): boolean => randomBytes && typeof randomBytes === 'function'\n                        \n                    \n\n                \n                    \n                        Check if the provider called in Nodejs\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
